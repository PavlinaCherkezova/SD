#include <iostream>

using namespace std;

template <typename T>
struct dllNode
{
    T data;
    dllNode<T> *previous, *next;

    dllNode(const T& _data, dllNode<T> *_previous, dllNode<T> *_next) : data(_data), previous(_previous), next (_next){}
};

template <typename T>
int countEl (dllNode<T> *other, int x)
{
    size_t counter = 0;
    while(other != nullptr)
    {
        if(other->data == x) counter ++;
        other = other->next;
    }
    return counter;
}

dllNode<int>* range (int x, int y)
{
    dllNode<int> *first = new dllNode<int> (x, nullptr, nullptr);
    dllNode<int> *curr = first;
    dllNode<int> *prev = first;

    while(x < y)
    {
        x++;
        curr->next = new dllNode<int> (x,prev,nullptr);
        curr = curr->next;
        prev = curr;

    }
    return first;
}
template<typename T>
void removeAll (dllNode<T> *&other, const T& x)
{
    dllNode<T> *curr = other;
    dllNode<T> *currPrev = other;

    while(curr != nullptr)
    {
        if(curr->data == x && curr->next == nullptr)
        {
            delete curr;
        }
        else if(other->data == x)
        {
            dllNode<T> *todelete = other;
            other->next = other;
            delete todelete;
        }
        else //(curr->data == x)
        {
            dllNode<T> *todelete = curr;
            currPrev->next = curr->next;
            curr->next->previous = currPrev;
            delete todelete;
        }
        currPrev = curr;
        curr = curr->next;
    }
}
template<typename T>
void append (dllNode<T> *&list1, dllNode<T> *&list2)
{
    dllNode<T> *curr = list1;
    while(curr->next != nullptr)
    {
        curr = curr->next;
    }
    curr->next = list2;
    list2->previous = curr;
}
template<typename T >
void print (dllNode<T> *&other)
{
    dllNode<T> *curr = other;
    while(curr != nullptr)
    {
        cout<<curr->data<<" ";
        curr = curr->next;
    }
}
int main()
{

    dllNode<int> *list1 = range (1,5);
    dllNode<int> *list2 = range(3,7);

    append(list1, list2);
    print(list1);
    cout<<"....."<<endl;
    cout<<countEl(list1, 3);
    //cout<<"....."<<endl;
    //removeAll(list1,3);
    //print(list1);


    return 0;
}
